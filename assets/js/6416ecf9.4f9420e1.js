"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[898],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return u}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=m(a),u=r,v=p["".concat(l,".").concat(u)]||p[u]||c[u]||s;return a?n.createElement(v,o(o({ref:t},d),{},{components:a})):n.createElement(v,o({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var m=2;m<s;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},1880:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return c}});var n=a(3117),r=a(102),s=(a(7294),a(3905)),o=["components"],i={sidebar_position:2},l="System Metadata",m={unversionedId:"reference/API/system-metadata",id:"reference/API/system-metadata",title:"System Metadata",description:"System Metadata APIs are designed to give you more information about the Nakji Ecosystem. Through the System Metadata APIs, you can get the full list of data streams that are available on Nakji Network and details of specific data streams.",source:"@site/docs/reference/API/system-metadata.md",sourceDirName:"reference/API",slug:"/reference/API/system-metadata",permalink:"/docs/reference/API/system-metadata",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/reference/API/overview"},next:{title:"Realtime Data",permalink:"/docs/reference/API/real-time"}},d={},c=[{value:"Endpoints",id:"endpoints",level:2},{value:"<code>/metadata/connectors</code>",id:"metadataconnectors",level:3},{value:"Request vars",id:"request-vars",level:4},{value:"Response vars",id:"response-vars",level:4},{value:"Example",id:"example",level:4},{value:"<code>/metadata/streams</code>",id:"metadatastreams",level:3},{value:"Request vars",id:"request-vars-1",level:4},{value:"Response vars",id:"response-vars-1",level:4},{value:"Example",id:"example-1",level:4},{value:"<code>/metadata/stream/:name</code>",id:"metadatastreamname",level:3},{value:"Request vars",id:"request-vars-2",level:4},{value:"Example",id:"example-2",level:4}],p={toc:c};function u(e){var t=e.components,a=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"system-metadata"},"System Metadata"),(0,s.kt)("p",null,"System Metadata APIs are designed to give you more information about the Nakji Ecosystem. Through the System Metadata APIs, you can get the full list of data streams that are available on Nakji Network and details of specific data streams."),(0,s.kt)("p",null,"Base URL: ",(0,s.kt)("inlineCode",{parentName:"p"},"https://api.nakji.network/v1")),(0,s.kt)("h2",{id:"endpoints"},"Endpoints"),(0,s.kt)("h3",{id:"metadataconnectors"},(0,s.kt)("inlineCode",{parentName:"h3"},"/metadata/connectors")),(0,s.kt)("p",null,"Returns a list of all available connectors that are available on Nakji network."),(0,s.kt)("h4",{id:"request-vars"},"Request vars"),(0,s.kt)("p",null,"0 GET variables."),(0,s.kt)("h4",{id:"response-vars"},"Response vars"),(0,s.kt)("p",null,"An array of strings of connector names."),(0,s.kt)("h4",{id:"example"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},'  curl -i -X GET "https://api.nakji.network/v1/metadata/connectors"\n\n[\n  "nakji.aave.0_0_0",\n  "nakji.chi.0_0_0",\n  "nakji.eth2.0_0_0",\n  "nakji.solana.0_0_0",\n  "nakji.traderjoe.0_0_0",\n  ...\n]\n')),(0,s.kt)("h3",{id:"metadatastreams"},(0,s.kt)("inlineCode",{parentName:"h3"},"/metadata/streams")),(0,s.kt)("p",null,"Returns a list of all available data streams available on Nakji. "),(0,s.kt)("h4",{id:"request-vars-1"},"Request vars"),(0,s.kt)("p",null,"0 GET variables. "),(0,s.kt)("h4",{id:"response-vars-1"},"Response vars"),(0,s.kt)("p",null,"An array of JSON objects with the following properties:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"name"),": name of the data stream"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"persisted"),": boolean value that tells you if the historical data for the data stream is available. If false, ",(0,s.kt)("a",{parentName:"li",href:"historical#data"},(0,s.kt)("inlineCode",{parentName:"a"},"/data"))," API is not available for the given data stream")),(0,s.kt)("h4",{id:"example-1"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},'    # list all\n    curl -i -X GET "https://api.nakji.network/v1/metadata/streams"\n\n    # Response format is `json`\n    [\n      {\n        "name": "nakji.solana.0_0_0.solana_reward",\n        "persisted": true\n      },\n      {\n        "name": "nakji.perpetual.0_0_0.stakedperptoken_staked",\n        "persisted": false\n      },\n      {...}\n    ]\n')),(0,s.kt)("h3",{id:"metadatastreamname"},(0,s.kt)("inlineCode",{parentName:"h3"},"/metadata/stream/:name")),(0,s.kt)("p",null,"Given a stream name, return a human readable overview of the data structure that can be expected from this stream."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"This endpoint is not stable and may be updated at any time. Use this for reference only. Use programmatically at your own risk."))),(0,s.kt)("h4",{id:"request-vars-2"},"Request vars"),(0,s.kt)("p",null,"0 GET variables. ",(0,s.kt)("inlineCode",{parentName:"p"},":name")," is the name of the stream. (Eg. ",(0,s.kt)("inlineCode",{parentName:"p"},"nakji.solana.0_0_0.solana_reward"),")."),(0,s.kt)("h4",{id:"example-2"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"curl -i -X GET https://api.nakji.network/v1/metadata/stream/nakji.uniswapv3.0_0_0.pool_collectprotocol\n\n# pool.CollectProtocol\n\nts: google.protobuf.Timestamp\n  seconds: int64\n  nanos: int32\nsender: bytes\nrecipient: bytes\namount0: bytes\n")))}u.isMDXComponent=!0}}]);
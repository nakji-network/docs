"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[898],{3905:function(e,a,t){t.d(a,{Zo:function(){return c},kt:function(){return u}});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),p=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},c=function(e){var a=p(e.components);return n.createElement(l.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,v=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return t?n.createElement(v,s(s({ref:a},c),{},{components:t})):n.createElement(v,s({ref:a},c))}));function u(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var l in a)hasOwnProperty.call(a,l)&&(o[l]=a[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=t[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1880:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var n=t(7462),r=t(3366),i=(t(7294),t(3905)),s=["components"],o={sidebar_position:2},l="System Metadata",p={unversionedId:"reference/API/system-metadata",id:"reference/API/system-metadata",title:"System Metadata",description:"System Metadata APIs are designed to give you more information about the Nakji Ecosystem. Through the System Metadata APIs, you can get the full list of data streams that are available on Nakji Network and details of specific data streams.",source:"@site/docs/reference/API/system-metadata.md",sourceDirName:"reference/API",slug:"/reference/API/system-metadata",permalink:"/docs/reference/API/system-metadata",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/reference/API/overview"},next:{title:"Historical Data",permalink:"/docs/reference/API/historical"}},c=[{value:"Endpoints",id:"endpoints",children:[{value:"<code>/metadata/connectors</code>",id:"metadataconnectors",children:[{value:"Request vars",id:"request-vars",children:[],level:4},{value:"Response vars",id:"response-vars",children:[],level:4},{value:"Example",id:"example",children:[],level:4}],level:3},{value:"<code>/metadata/streams</code>",id:"metadatastreams",children:[{value:"Request vars",id:"request-vars-1",children:[],level:4},{value:"Response vars",id:"response-vars-1",children:[],level:4},{value:"Example",id:"example-1",children:[],level:4}],level:3},{value:"<code>/metadata/stream/:name/keys</code>",id:"metadatastreamnamekeys",children:[{value:"Request vars",id:"request-vars-2",children:[],level:4},{value:"Response vars",id:"response-vars-2",children:[],level:4},{value:"Example",id:"example-2",children:[],level:4}],level:3}],level:2}],d={toc:c};function m(e){var a=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"system-metadata"},"System Metadata"),(0,i.kt)("p",null,"System Metadata APIs are designed to give you more information about the Nakji Ecosystem. Through the System Metadata APIs, you can get the full list of data streams that are available on Nakji Network and details of specific data streams."),(0,i.kt)("p",null,"All System Metadata endpoints require ",(0,i.kt)("a",{parentName:"p",href:"../auth"},"authentication")," during the private beta."),(0,i.kt)("p",null,"Base URL: ",(0,i.kt)("inlineCode",{parentName:"p"},"https://api.nakji.network/v1")),(0,i.kt)("h2",{id:"endpoints"},"Endpoints"),(0,i.kt)("h3",{id:"metadataconnectors"},(0,i.kt)("inlineCode",{parentName:"h3"},"/metadata/connectors")),(0,i.kt)("p",null,"Returns a list of all available connectors that are available on Nakji network."),(0,i.kt)("h4",{id:"request-vars"},"Request vars"),(0,i.kt)("p",null,"0 GET variables."),(0,i.kt)("h4",{id:"response-vars"},"Response vars"),(0,i.kt)("p",null,"An array of strings of connector names."),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'  curl -i -X GET \\\n      -H \'Origin: https://yourdomain\' \\\n      -H \'Authorization:Bearer <apikey>\' \\\n      "https://api.nakji.network/v1/metadata/connectors"\n\n[\n  "nakji.aave.0_0_0",\n  "nakji.chi.0_0_0",\n  "nakji.eth2.0_0_0",\n  "nakji.solana.0_0_0",\n  "nakji.traderjoe.0_0_0",\n  ...\n]\n')),(0,i.kt)("h3",{id:"metadatastreams"},(0,i.kt)("inlineCode",{parentName:"h3"},"/metadata/streams")),(0,i.kt)("p",null,"Returns a list of all available data streams available on Nakji. "),(0,i.kt)("h4",{id:"request-vars-1"},"Request vars"),(0,i.kt)("p",null,"0 GET variables. "),(0,i.kt)("h4",{id:"response-vars-1"},"Response vars"),(0,i.kt)("p",null,"An array of JSON objects with the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name"),": name of the data stream"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"persisted"),": boolean value that tells you if the historical data for the data stream is available. If false, ",(0,i.kt)("a",{parentName:"li",href:"historical#data"},(0,i.kt)("inlineCode",{parentName:"a"},"/data"))," API is not available for the given data stream")),(0,i.kt)("h4",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'    # list all\n    curl -i -X GET \\\n      -H \'Origin: https://yourdomain\' \\\n      -H \'Authorization:Bearer <apikey>\' \\\n      "https://api.nakji.network/v1/metadata/streams"\n\n    # Response format is `json`\n    [\n      {\n        "name": "nakji.solana.0_0_0.solana_reward",\n        "persisted": true\n      },\n      {\n        "name": "nakji.perpetual.0_0_0.stakedperptoken_staked",\n        "persisted": false\n      },\n      {...}\n    ]\n')),(0,i.kt)("h3",{id:"metadatastreamnamekeys"},(0,i.kt)("inlineCode",{parentName:"h3"},"/metadata/stream/:name/keys")),(0,i.kt)("p",null,"Given a stream name, return an array of namespace-subject pairs that exists for the given data stream. These can be used as values for the optional request vars for the ",(0,i.kt)("a",{parentName:"p",href:"./historical"},"historical")," or ",(0,i.kt)("a",{parentName:"p",href:"./real-time"},"real-time")," data endpoints."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Not all streams have keys. In thoses cases, the API will return an empty list."))),(0,i.kt)("h4",{id:"request-vars-2"},"Request vars"),(0,i.kt)("p",null,"0 GET variables. ",(0,i.kt)("inlineCode",{parentName:"p"},":name")," is the name of the stream. (Eg. ",(0,i.kt)("inlineCode",{parentName:"p"},"nakji.solana.0_0_0.solana_reward"),")."),(0,i.kt)("h4",{id:"response-vars-2"},"Response vars"),(0,i.kt)("p",null,"An array of JSON objects with the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"namespace"),": namespace of the key"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"subject"),": subject of the key")),(0,i.kt)("h4",{id:"example-2"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'    curl -i -X GET \\\n      -H \'Origin: https://yourdomain\' \\\n      -H \'Authorization:Bearer <apikey>\' \n      https://api.nakji.network/v1/metadata/stream/nakji.common.0_0_0.liquiditypool_change/keys\n\n\n    {\n      "namespace": "sushiswap",\n      "subject": "0x58Dc5a51fE44589BEb22E8CE67720B5BC5378009"\n    }\n    {\n      "namespace": "pancakeswap",\n      "subject": "0x116074C3548C9C761F68850fb8609e90F7BCe791"\n    }\n    {\n      "namespace": "uniswapv2",\n      "subject": "0x3d2816aF5A6a0Ac9c62fb9bb51a03723d6EC4c36"\n    }\n')))}m.isMDXComponent=!0}}]);